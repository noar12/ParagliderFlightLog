@page "/FlightsStatistic"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment
@inject MainViewModel mvm
@using ParagliderFlightLog.ViewModels
<PageTitle>Flights statistic</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-4">
            <strong>Analyze</strong>
            <RadzenDropDown TValue="StatisticalFlightsAnalysis" AllowFiltering="false" Data=@Enum.GetValues(typeof(StatisticalFlightsAnalysis)) @bind-Value=AnalysisToDo
                            Class="w-100">
                <Template>
                    @(GetAnalyseName(context))
                </Template>
            </RadzenDropDown>

            <strong>Year to analyze</strong>
            <RadzenDropDown AllowFiltering="false" Data=@mvm.YearsOfFlying @bind-Value=@YearToAnalyse
                            Class="w-100" />
            <RadzenButton Click=@(args => OnAnalyze()) Text="Analyze" ButtonStyle="ButtonStyle.Primary" />

        </div>
        <div class="col-4">
            <div class="row"><strong>Flights count:</strong> @fsvm.FlightsCount</div>
            <div class="row"><strong>Flights total duration:</strong> @fsvm.FlightsDurationText</div>


        </div>
        <div class="col-4">
            <div class="row"><strong>Flights mean duration:</strong>@fsvm.MeanFlightsDurationText</div>
            <div class="row"><strong>Flights median duration:</strong>@fsvm.MedianFlightDurationText</div>
        </div>
    </div>
    <div class="row-cols-auto">
        <RadzenChart>
            @if (AnalysisToDo == StatisticalFlightsAnalysis.DurationDistribution)
            {
                <RadzenColumnSeries Data="@DurationAnalysisResult"
                                Title="Flight duration repartition"
                                CategoryProperty="BarLocation"
                                ValueProperty="BarValue" />
            }
            @if (AnalysisToDo == StatisticalFlightsAnalysis.MontlyMedian)
            {
                int i = 0;
                foreach (YearMonthlyMedian item in MonthlyMedianAnalysisResult)
                {
                    <RadzenColumnSeries Data="@item.MonthlyMedianItems"
                                Title="@mvm.YearsOfFlying[i].ToString()"
                                CategoryProperty="Month"
                                ValueProperty="BarValue" />
                    i++;
                }
            }
        </RadzenChart>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        YearToAnalyse = DateTime.Now.Year;
        fsvm = new FlightsStatisticsViewModel(mvm, new DateTime(YearToAnalyse, 1, 1), new DateTime(YearToAnalyse, 12, 31));
        DurationAnalysisResult = HistDataToDurationItem(fsvm.FlightsDurationHistData);

    }

    FlightsStatisticsViewModel fsvm;
    StatisticalFlightsAnalysis AnalysisToDo;
    int YearToAnalyse;





    void OnAnalyze()
    {
        switch (AnalysisToDo)
        {
            case StatisticalFlightsAnalysis.MontlyMedian:
                string[] l_MonthList = { "January", "February", "March", "April", "Mai", "June", "July", "August", "Septempber", "October", "November", "December" };
                string[] l_YearsText = new string[mvm.YearsOfFlying.Count];
                MonthlyMedianAnalysisResult = new YearMonthlyMedian[mvm.YearsOfFlying.Count];
                int i = 0;

                foreach (int l_FlightYear in mvm.YearsOfFlying)
                {
                    double[] l_MonthlyMeidans = fsvm.GetMonthlyMedian(l_FlightYear);
                    MonthlyItem[] currentYearMonthlyMedian = new MonthlyItem[l_MonthList.Length];
                    int j = 0;
                    foreach (double monthMedian in l_MonthlyMeidans)
                    {
                        currentYearMonthlyMedian[j] = new MonthlyItem()
                            {
                                BarValue = monthMedian,
                                Month = l_MonthList[j],
                            };
                        j++;
                    }
                    MonthlyMedianAnalysisResult[i] = new YearMonthlyMedian()
                        {
                            MonthlyMedianItems = currentYearMonthlyMedian,
                        };
                    l_YearsText[i] = l_FlightYear.ToString();
                    i++;
                }


                break;
            case StatisticalFlightsAnalysis.DurationDistribution:
                fsvm = new FlightsStatisticsViewModel(mvm, new DateTime(YearToAnalyse, 1, 1), new DateTime(YearToAnalyse, 12, 31));
                DurationAnalysisResult = HistDataToDurationItem(fsvm.FlightsDurationHistData);
                break;
            default:
                break;
        }
    }

    string GetAnalyseName(StatisticalFlightsAnalysis analyse)
    {
        switch (analyse)
        {
            case StatisticalFlightsAnalysis.MontlyMedian:
                return "Monthly median";
            case StatisticalFlightsAnalysis.DurationDistribution:
                return "Duration Distribution";
            default:
                return "";
        }
    }

    class DurationItem
    {
        public double BarLocation { get; set; }
        public double BarValue { get; set; }
    }

    class MonthlyItem
    {
        public string Month { get; set; } = string.Empty;
        public double BarValue { get; set; }
    }
    class YearMonthlyMedian
    {
        public MonthlyItem[] MonthlyMedianItems { get; set; } = new MonthlyItem[0];
    }
    DurationItem[] DurationAnalysisResult = new DurationItem[0];

    YearMonthlyMedian[] MonthlyMedianAnalysisResult = new YearMonthlyMedian[0];

    DurationItem[] HistDataToDurationItem(HistData histData)
    {
        List<DurationItem> durationItems = new List<DurationItem>();
        for (int i = 0; i < histData.Counts.Length; ++i)
        {
            durationItems.Add(new DurationItem()
                {
                    BarValue = histData.Counts[i],
                    BarLocation = histData.BinEdges[i],
                });
        }
        return durationItems.ToArray();
    }
}
