@page "/Gliderslist"
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment
@inject MainViewModel mvm
@using ParagliderFlightLog.ViewModels
<PageTitle>Gliders list</PageTitle>

<div class="container">
	<div class="row">
		<div class="col-8">
			<RadzenDataGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="20"
							AllowSorting="true" Data="@mvm.GliderListViewModel" TItem="GliderViewModel"
							SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedGliders
							ContextMenu=@(args => ShowContextMenuWithItems(args))>
				<Columns>
					<RadzenDataGridColumn TItem="GliderViewModel" Property="FullName" Title="Glider name" />
					<RadzenDataGridColumn TItem="GliderViewModel" Property="BuildYear" Title="Build year" />
					<RadzenDataGridColumn TItem="GliderViewModel" Property="LastCheckDateTime" Title="Last check date" FormatString="{0:d}" />
				</Columns>
			</RadzenDataGrid>
			<RadzenButton Click=@OnAddGlider Text="Add Glider" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Primary" />
		</div>
		@if (LastSelectedGlider != null)
		{
			<div class="col-4">
				<div class="row"><strong>Total flight count:</strong> @LastSelectedGlider.TotalFlightCount</div>
				<div class="row"> <strong>Total flight time:</strong> @LastSelectedGlider.TotalFlightTime</div>
				<div class="row"><strong>Flight time since last check:</strong> @LastSelectedGlider.FlightTimeSinceLastCheck</div>
			</div>
		}

	</div>
</div>

@code {
	protected override void OnInitialized()
	{

	}


	IList<GliderViewModel> SelectedGliders = new List<GliderViewModel>();
	GliderViewModel? LastSelectedGlider
	{
		get
		{
			return SelectedGliders.Count > 0 ? SelectedGliders[SelectedGliders.Count - 1] : null;
		}
	}
	void ShowContextMenuWithItems(MouseEventArgs args)
	{
		ContextMenuService.Open(args,
			new List<ContextMenuItem> {
				new ContextMenuItem(){ Text = "Edit glider", Value = gliderAction.Edit },
				 }, OnMenuItemClick);
	}
	void OnMenuItemClick(MenuItemEventArgs args)
	{
		if (args.Value is gliderAction action)
		{
			switch (action)
			{
				case gliderAction.Edit:
					OnEditGlider();
					break;
			}
		}
		ContextMenuService.Close();

	}
	enum gliderAction
	{
		Edit,
	}

	async Task OnEditGlider()
	{
		await DialogService.OpenAsync<EditGlider>($"Edit glider",
				new Dictionary<string, object>() { { "GliderToEdit", LastSelectedGlider } },
				new DialogOptions() { Width = "700px", Height = "600px", Resizable = true, Draggable = true });
		mvm.EditGlider(LastSelectedGlider);
		StateHasChanged();
	}

	void OnAddGlider()
	{
		mvm.AddGlider();
	}

}
