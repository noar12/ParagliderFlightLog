@page "/Gliderslist"
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment
@inject MainViewModel mvm
@using ParagliderFlightLog.ViewModels
<PageTitle>Gliders list</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-8">
            <RadzenDataGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="20"
                            AllowSorting="true" Data="@mvm.GliderListViewModel" TItem="GliderViewModel"
                            SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedGliders
                            ContextMenu=@(args => ShowContextMenuWithItems(args))>
                <Columns>
                    <RadzenDataGridColumn TItem="GliderViewModel" Property="FullName" Title="Glider name" />
                    <RadzenDataGridColumn TItem="GliderViewModel" Property="BuildYear" Title="Build year" />
                    <RadzenDataGridColumn TItem="GliderViewModel" Property="LastCheckDateTime" Title="Last check date" FormatString="{0:d}" />
                    <RadzenDataGridColumn TItem="GliderViewModel" Property="TotalFlightCount" Title="Total flight count" />
                    <RadzenDataGridColumn TItem="GliderViewModel" Property="TotalFlightTime" Title="Total flight time" />
                    <RadzenDataGridColumn TItem="GliderViewModel" Property="FlightTimeSinceLastCheck" Title="Flight time since last check" />
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</div>

@code{
    protected override void OnInitialized()
    {

    }


    IList<GliderViewModel> SelectedGliders = new List<GliderViewModel>();
    GliderViewModel LastSelectedGlider
    {
        get
        {
            return SelectedGliders.Count > 0 ? SelectedGliders[SelectedGliders.Count - 1] : new GliderViewModel();
        }
    }
    void ShowContextMenuWithItems(MouseEventArgs args){
        ContextMenuService.Open(args,
            new List<ContextMenuItem> {
                new ContextMenuItem(){ Text = "Edit glider", Value = gliderAction.Edit },
             }, OnMenuItemClick);
    }
    void OnMenuItemClick(MenuItemEventArgs args)
    {
        if (args.Value is gliderAction action){
            switch (action)
            {
                case gliderAction.Edit:
                    OnEditGlider();
                    break;
            }
        }
        ContextMenuService.Close();

    }
    enum gliderAction{
        Edit,
    }

    async Task OnEditGlider()
    {
        await DialogService.OpenAsync<EditSite>($"Edit glider",
                new Dictionary<string, object>() { { "GliderToEdit", LastSelectedGlider }, { "ViewModel", mvm } },
                new DialogOptions() { Width = "700px", Height = "600px", Resizable = true, Draggable = true });
        // do something with the edited glider
    }
    async Task OnAddSites(InputFileChangeEventArgs e)
    {

    }
}
