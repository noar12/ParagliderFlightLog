@page "/"
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment
@inject MainViewModel mvm
@using ParagliderFlightLog.ViewModels
<PageTitle>Flight list</PageTitle>

<div class="container">
	<div class="row">
		<div class="col-8">
			<InputFile OnChange="@OnAddFlights" multiple />
			<RadzenDataGrid @ref="dataGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="20"
							AllowSorting="true" Data="@mvm.FlightListViewModel" TItem="FlightViewModel"
							SelectionMode="DataGridSelectionMode.Single" @bind-Value=@SelectedFlights
							ContextMenu=@(args => ShowContextMenuWithItems(args))>
				<Columns>
					<RadzenDataGridColumn TItem="FlightViewModel" Property="TakeOffDateTime" Title="Date/Time" Width="150px" SortOrder="SortOrder.Descending" />
					<RadzenDataGridColumn TItem="FlightViewModel" Property="TakeOffSiteName" Title="Site" />
					<RadzenDataGridColumn TItem="FlightViewModel" Property="FlightDuration" Title="Duration" />
				</Columns>
			</RadzenDataGrid>
		</div>
		@if (LastSelectedFlight != null)
		{
			<div class="col-4">
				<div class="row">
					<strong>Glider:</strong> @LastSelectedFlight.GliderName
				</div>
				<div class="row">
					<strong>Max height [m]:</strong> @LastSelectedFlight.MaxHeight
				</div>
				<div class="row">
					<strong>Trace length [km]:</strong> @LastSelectedFlight.TraceLength
				</div>
				<div class="row">
					<strong>Max climb (8s) [m/s]:</strong> @LastSelectedFlight.MaxClimb
				</div>
				<div class="row">
					<strong>Max sink (8s) [m/s]:</strong> @LastSelectedFlight.MaxSink
				</div>
				<div class="row">
					<strong>Comment:</strong> @LastSelectedFlight.Comment
				</div>
			</div>
		}

	</div>
</div>

@code {

	private RadzenDataGrid<FlightViewModel> dataGrid = new();

	protected override void OnInitialized()
	{ }
	IList<FlightViewModel> SelectedFlights = new List<FlightViewModel>();
	FlightViewModel? LastSelectedFlight
	{
		get
		{
			return SelectedFlights.Count > 0 ? SelectedFlights[SelectedFlights.Count - 1] : null;
		}
	}
	void ShowContextMenuWithItems(MouseEventArgs args)
	{
		ContextMenuService.Open(args,
			new List<ContextMenuItem> {
				new ContextMenuItem(){ Text = "Edit flight", Value = flightAction.Edit },
				new ContextMenuItem(){ Text = "Remove flights", Value = flightAction.Remove },
					 }, OnMenuItemClick);
	}
	void OnMenuItemClick(MenuItemEventArgs args)
	{
		if (args.Value is flightAction action)
		{
			switch (action)
			{
				case flightAction.Edit:
					OnEditFlight();
					break;
				case flightAction.Remove:
					OnRemoveFlights(SelectedFlights);
					break;
			}
		}
		ContextMenuService.Close();

	}
	enum flightAction
	{
		Edit,
		Remove,
	}
	async Task OnRemoveFlights(IList<FlightViewModel> flightsToRemove)
	{
		var answer = await DialogService.Confirm($"Are you sure you want to delete {SelectedFlights.Count} flight(s)?",
		"Flight remove confirmation", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
		if (answer == true)
		{
			foreach (FlightViewModel fvm in flightsToRemove)
			{
				mvm.RemoveFlight(fvm);
			}
		}
		StateHasChanged();
		await dataGrid.Reload();
	}
	async Task OnEditFlight()
	{
		await DialogService.OpenAsync<EditFlight>($"Edit flight",
				new Dictionary<string, object>() { { "FlightToEdit", LastSelectedFlight }, { "ViewModel", mvm } },
				new DialogOptions() { Width = "700px", Height = "570px", Resizable = true, Draggable = true });

		StateHasChanged();
	}
	async Task OnAddFlights(InputFileChangeEventArgs e)
	{
		Console.WriteLine($"ContentRootPath is : {Environment.ContentRootPath}");
		List<string> l_IgcFilePaths = new List<string>();
		foreach (var file in e.GetMultipleFiles())
		{
			try
			{
				long maxFileSize = 2048000;
				var trustedFileNameForFileStorage = Path.GetRandomFileName();
				var path = Path.Combine(Environment.ContentRootPath,
						"tmp", trustedFileNameForFileStorage);

				await using FileStream fs = new(path, FileMode.Create);
				await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
				l_IgcFilePaths.Add(fs.Name);
				Console.WriteLine($"File copied to {fs.Name}");
			}
			catch (Exception ex)
			{
				Console.WriteLine("File: {Filename} Error: {Error}",
					file.Name, ex.Message);
			}
		}
		mvm.AddFlightsFromIGC(l_IgcFilePaths.ToArray());

		foreach (string filepath in l_IgcFilePaths)
		{
			try
			{
				System.IO.File.Delete(filepath);
			}
			catch (System.IO.IOException ex)
			{
				Console.WriteLine(ex.Message);
			}
		}

		StateHasChanged();
		await dataGrid.Reload();
	}
}
