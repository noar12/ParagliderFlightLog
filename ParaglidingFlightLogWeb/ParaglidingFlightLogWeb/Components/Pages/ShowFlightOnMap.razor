@using ParaglidingFlightLogWeb.ViewModels
<PageTitle>Flight On Map</PageTitle>

<RadzenCard>
    <div class="row" id="flightMap" style="@($"height: {Height}px")" />
</RadzenCard>

@code {
    [Parameter]
    public FlightViewModel FlightToShow { get; set; } = null!;
    [Parameter]
    public int Height { get; set; }
    private IJSObjectReference? module;
    private object? flightMap;
    [Inject] IJSRuntime jsRuntime { get; set; } = null!;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./leafletmap.js");
            if (module != null)
            {
                flightMap = await module.InvokeAsync<IJSObjectReference>("load_map", "flightMap", 0, 0, 2);
            }
        }
        double[][] latlngs = FlightToShow.GetLatLngsArray();
        if (module is not null && latlngs.Length > 0)
        {
            //flightMap = await module.InvokeAsync<IJSObjectReference>("remove_all", flightMap); //this remove even the tile. It's a bit violent...
            flightMap = await module.InvokeAsync<IJSObjectReference>("add_polyline",
                                                            flightMap,
                                                            latlngs);
            if (FlightToShow.XcScore is not null)
            {
                flightMap = await module.InvokeAsync<IJSObjectReference>("add_geojson",
                flightMap,
                FlightToShow.XcScore.GeoJsonObject);
            }
        }
    }
}
